{
  "openapi": "3.0.1",
  "info": {
    "title": "Lukittu",
    "description": "",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://app.lukittu.com",
      "description": "Production server"
    }
  ],
  "tags": [],
  "paths": {
    "/api/v1/client/teams/{teamId}/verification/verify": {
      "post": {
        "summary": "Verify license",
        "deprecated": false,
        "description": "This endpoint is used to validate a license key with the Lukittu backend. Typically, you should call this endpoint when your software starts and act based on the response provided.\n\nImportant Note: If you are using a programming language that supports loading business logic code remotely (e.g., Java with a Remote ClassLoader), you should not use this endpoint. Instead, use the \"classloader\" endpoint for enhanced security.",
        "tags": [],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Your team's UUID. You can find this value in your team's settings on the Lukittu dashboard. Format: UUID v4.",
            "required": true,
            "example": "{{$string.uuid}}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "licenseKey": {
                    "type": "string",
                    "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$",
                    "description": "The Lukittu license key. Lukittu license keys always follow this format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX where X is an uppercase letter (A-Z) or a digit (1-9)."
                  },
                  "customerId": {
                    "type": "string",
                    "description": "The customer's UUID (UUID v4). This parameter is useful when a license key is shared among multiple customers, as it allows you to identify individual customers. Note: If strict customers are enabled in your team settings and the license has at least one customer attached, you must provide this value.",
                    "format": "uuid"
                  },
                  "productId": {
                    "type": "string",
                    "description": "The product's UUID (UUID v4). This binds the license key to a specific Lukittu product. Note: If strict products are enabled in your team settings and the license has at least one product attached, you must provide this value.",
                    "format": "uuid"
                  },
                  "challenge": {
                    "type": "string",
                    "description": "A client-generated random string used to prevent request interception. The Lukittu backend signs this challenge with its RSA private key. You can then validate the challenge using the corresponding public key. Recommendation: Always use a challenge for enhanced security, though it is not strictly required.",
                    "maxLength": 1000,
                    "pattern": "^[A-Za-z0-9]+$"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version number of your Lukittu product. Useful for tracking which product releases are actively being used. Version must not contain spaces and must be between 3 and 255 characters.",
                    "minLength": 3,
                    "maxLength": 255,
                    "pattern": "^[A-Za-z0-9]+$"
                  },
                  "deviceIdentifier": {
                    "type": "string",
                    "description": "A unique identifier for the client device. Typically a hardware ID or another identifier that remains consistent across sessions. Device identifier must not contain spaces and must be between 10 and 1000 characters.",
                    "minLength": 10,
                    "maxLength": 1000,
                    "pattern": "^[A-Za-z0-9]+$"
                  }
                },
                "required": [
                  "licenseKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        },
                        "details": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string",
                          "enum": [
                            "VALID"
                          ]
                        },
                        "challengeResponse": {
                          "type": "string",
                          "description": "Present if challenge was given"
                        }
                      },
                      "required": [
                        "timestamp",
                        "valid",
                        "details",
                        "code"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "nullable": true
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "additionalProperties": true
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses": {
      "post": {
        "summary": "Create License",
        "deprecated": false,
        "description": "Create a new license for your team. This endpoint allows you to programmatically generate license keys and associate them with customers and products.",
        "tags": [],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Your team's UUID. You can find this value in your team's settings on the Lukittu dashboard.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expirationType": {
                    "type": "string",
                    "enum": [
                      "DATE",
                      "DURATION",
                      "NEVER"
                    ],
                    "description": "How the license should expire"
                  },
                  "expirationStart": {
                    "type": "string",
                    "enum": [
                      "CREATION",
                      "ACTIVATION"
                    ],
                    "nullable": true,
                    "description": "When to start counting the duration from"
                  },
                  "expirationDate": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Specific date when the license expires"
                  },
                  "expirationDays": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Number of days until expiration"
                  },
                  "seats": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Number of allowed concurrent activations"
                  },
                  "suspended": {
                    "type": "boolean",
                    "description": "Whether the license is suspended"
                  },
                  "productIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of product UUIDs to associate with the license"
                  },
                  "customerIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of customer UUIDs to associate with the license"
                  },
                  "ipLimit": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Maximum number of unique IP addresses"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom metadata to store with the license"
                  },
                  "sendEmailDelivery": {
                    "type": "boolean",
                    "description": "Whether to send license key via email to associated customers"
                  }
                },
                "required": [
                  "expirationType",
                  "suspended",
                  "productIds",
                  "customerIds",
                  "sendEmailDelivery"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "License created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/License"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "details": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "details",
                        "timestamp",
                        "valid"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "result"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key"
          },
          "403": {
            "description": "License limit exceeded"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "summary": "List Licenses",
        "deprecated": false,
        "description": "Retrieve a paginated list of licenses for your team.",
        "tags": [],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Your team's UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                10,
                25,
                50,
                100
              ],
              "default": 10
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Column to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "productIds",
            "in": "query",
            "description": "Filter by product IDs (comma-separated UUIDs)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerIds",
            "in": "query",
            "description": "Filter by customer IDs (comma-separated UUIDs)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of licenses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "licenses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "licenseKey": {
                                "type": "string",
                                "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$"
                              },
                              "ipLimit": {
                                "type": "integer",
                                "nullable": true
                              },
                              "metadata": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "expirationType": {
                                "type": "string",
                                "enum": [
                                  "DATE",
                                  "DURATION",
                                  "NEVER"
                                ]
                              },
                              "expirationStart": {
                                "type": "string",
                                "enum": [
                                  "CREATION",
                                  "ACTIVATION"
                                ],
                                "nullable": true
                              },
                              "expirationDate": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                              },
                              "expirationDays": {
                                "type": "integer",
                                "nullable": true
                              },
                              "seats": {
                                "type": "integer",
                                "nullable": true
                              },
                              "suspended": {
                                "type": "boolean"
                              },
                              "teamId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "createdByUserId": {
                                "type": "string",
                                "format": "uuid",
                                "nullable": true
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "page": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "details": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/client/teams/{teamId}/verification/heartbeat": {
      "post": {
        "summary": "License Heartbeat",
        "deprecated": false,
        "description": "The Heartbeat endpoint is used to determine whether a specific device is still active. You should call this endpoint at regular intervals (e.g., once every 30 minutes). This process also validates the license key in a similar way to the Verify License endpoint.",
        "tags": [],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Your team's UUID. You can find this value in your team's settings on the Lukittu dashboard. Format: UUID v4.",
            "required": true,
            "example": "{{$string.uuid}}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "licenseKey": {
                    "type": "string",
                    "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$",
                    "description": "The Lukittu license key. Lukittu license keys always follow this format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX where X is an uppercase letter (A-Z) or a digit (1-9)."
                  },
                  "customerId": {
                    "type": "string",
                    "description": "The customer's UUID (UUID v4). This parameter is useful when a license key is shared among multiple customers, as it allows you to identify individual customers. Note: If strict customers are enabled in your team settings and the license has at least one customer attached, you must provide this value.",
                    "format": "uuid"
                  },
                  "productId": {
                    "type": "string",
                    "description": "The product's UUID (UUID v4). This binds the license key to a specific Lukittu product. Note: If strict products are enabled in your team settings and the license has at least one product attached, you must provide this value.",
                    "format": "uuid"
                  },
                  "challenge": {
                    "type": "string",
                    "description": "A client-generated random string used to prevent request interception. The Lukittu backend signs this challenge with its RSA private key. You can then validate the challenge using the corresponding public key. Recommendation: Always use a challenge for enhanced security, though it is not strictly required.",
                    "maxLength": 1000,
                    "pattern": "^[A-Za-z0-9]+$"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version number of your Lukittu product. Useful for tracking which product releases are actively being used. Version must not contain spaces and must be between 3 and 255 characters.",
                    "minLength": 3,
                    "maxLength": 255,
                    "pattern": "^[A-Za-z0-9]+$"
                  },
                  "deviceIdentifier": {
                    "type": "string",
                    "description": "A unique identifier for the client device. Typically a hardware ID or another identifier that remains consistent across sessions. Device identifier must not contain spaces and must be between 10 and 1000 characters.",
                    "minLength": 10,
                    "maxLength": 1000,
                    "pattern": "^[A-Za-z0-9]+$"
                  }
                },
                "required": [
                  "licenseKey",
                  "deviceIdentifier"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        },
                        "details": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string",
                          "enum": [
                            "VALID"
                          ]
                        },
                        "challengeResponse": {
                          "type": "string",
                          "description": "Present if challenge was given"
                        }
                      },
                      "required": [
                        "timestamp",
                        "valid",
                        "details",
                        "code"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "nullable": true
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "additionalProperties": true
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/v1/client/teams/{teamId}/verification/classloader": {
      "get": {
        "summary": "Download Release",
        "deprecated": false,
        "description": "The Classloader endpoint is used to download a release file. It is primarily intended for programming languages that support loading business logic code directly from a remote server into memory. For example, this is commonly used with Java classloaders.",
        "tags": [],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Your team's UUID. You can find this value in your team's settings on the Lukittu dashboard. Format: UUID v4.",
            "required": true,
            "example": "{{$string.uuid}}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "licenseKey",
            "in": "query",
            "description": "The Lukittu license key. Lukittu license keys always follow this format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX where X is an uppercase letter (A-Z) or a digit (1-9).",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "The product's UUID (UUID v4). This binds the license key to a specific Lukittu product. Note: If strict products are enabled in your team settings and the license has at least one product attached, you must provide this value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sessionKey",
            "in": "query",
            "description": "A unique identifier for the session, usually a randomly generated string. The session key is sent in an encrypted format to the Lukittu backend, using the client's RSA public key for encryption. The Lukittu backend decrypts the session key and uses it to encrypt the release file. The client retains the original session key, which is used to decrypt the file content. Session key must not contain spaces and must be between 10 and 1000 characters.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 10,
              "maxLength": 1000,
              "pattern": "^[A-Za-z0-9]+$"
            }
          },
          {
            "name": "deviceIdentifier",
            "in": "query",
            "description": "A unique identifier for the client device. Typically a hardware ID or another identifier that remains consistent across sessions. Device identifier must not contain spaces and must be between 10 and 1000 characters.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 10,
              "maxLength": 1000,
              "pattern": "^[A-Za-z0-9]+$"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version number of your Lukittu product. Useful for tracking which product releases are actively being used. Version must not contain spaces and must be between 3 and 255 characters.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 255,
              "pattern": "^[A-Za-z0-9]+$"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "The customer's UUID (UUID v4). This parameter is useful when a license key is shared among multiple customers, as it allows you to identify individual customers. Note: If strict customers are enabled in your team settings and the license has at least one customer attached, you must provide this value.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with file download",
            "headers": {
              "Content-Type": {
                "description": "The MIME type of the file",
                "schema": {
                  "type": "string",
                  "example": "application/octet-stream"
                }
              },
              "X-File-Size": {
                "description": "Size of the file",
                "schema": {
                  "type": "string"
                }
              },
              "X-Product-Name": {
                "description": "Name of the product",
                "schema": {
                  "type": "string"
                }
              },
              "X-Release-Status": {
                "description": "Status of the release",
                "schema": {
                  "type": "string"
                }
              },
              "X-Release-Created-At": {
                "description": "Creation date of the release",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "X-File-Created-At": {
                "description": "Creation date of the file",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "X-Version": {
                "description": "Version of the release",
                "schema": {
                  "type": "string"
                }
              },
              "X-Latest-Version": {
                "description": "Latest version available",
                "schema": {
                  "type": "string"
                }
              },
              "X-Lukittu-Version": {
                "description": "Version of Lukittu",
                "schema": {
                  "type": "string"
                }
              },
              "X-Main-Class": {
                "description": "Main class name",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {}
          },
          "400": {
            "description": "Bad request or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "field": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "nullable": true
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "additionalProperties": true
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}": {
      "get": {
        "summary": "Get License by ID",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "License found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/License"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "details": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "details",
                        "timestamp",
                        "valid"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Invalid API key"
          },
          "404": {
            "description": "License not found"
          }
        }
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/{licenseKey}": {
      "get": {
        "summary": "Get License by Key",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "License found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/License"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "details": {
                          "type": "string"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "valid": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "details",
                        "timestamp",
                        "valid"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Invalid API key"
          },
          "404": {
            "description": "License not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "License": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "licenseKey": {
            "type": "string",
            "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$"
          },
          "ipLimit": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "expirationType": {
            "type": "string",
            "enum": [
              "DATE",
              "DURATION",
              "NEVER"
            ]
          },
          "expirationStart": {
            "type": "string",
            "enum": [
              "CREATION",
              "ACTIVATION"
            ],
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDays": {
            "type": "integer",
            "nullable": true
          },
          "seats": {
            "type": "integer",
            "nullable": true
          },
          "suspended": {
            "type": "boolean"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "createdByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "customers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "fullName": {
                  "type": "string"
                },
                "metadata": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "teamId": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdByUserId": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "nullable": true
                },
                "metadata": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "teamId": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdByUserId": {
                  "type": "string",
                  "format": "uuid"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
