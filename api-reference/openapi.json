{
  "openapi": "3.0.1",
  "info": {
    "title": "Lukittu API",
    "description": "The Lukittu API provides comprehensive license management and verification services for software products.\n\n## Authentication\n\n**Client Endpoints** (`/api/v1/client/*`): No authentication required. These are public endpoints for license verification.\n\n**Developer Endpoints** (`/api/v1/dev/*`): Require API key authentication via Bearer token.\n\n## API Types\n\n- **Client API**: Used by your software to verify licenses, send heartbeats, and download releases\n- **Developer API**: Used for programmatic license management from your backend systems\n\n## Rate Limiting\n\nAll endpoints are rate-limited to prevent abuse. If you exceed the rate limit, you'll receive a 429 status code.\n\n## Response Format\n\nAll responses follow a consistent format with `data` and `result` objects:\n\n```json\n{\n  \"data\": {}, // Response data (null for errors)\n  \"result\": {\n    \"timestamp\": \"2023-09-15T14:30:00Z\",\n    \"valid\": true,\n    \"details\": \"Human-readable message\",\n    \"code\": \"SUCCESS_CODE\" // Optional error/success code\n  }\n}\n```\n",
    "version": "1.0.0",
    "contact": {
      "name": "Lukittu Community",
      "url": "https://discord.lukittu.com"
    }
  },
  "servers": [
    {
      "url": "https://app.lukittu.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Client - Verify",
      "description": "Client endpoints for license verification, heartbeat monitoring, and file downloads.\nThese endpoints are used directly by your software applications.\n"
    },
    {
      "name": "Dev - Licenses",
      "description": "Developer endpoints for license management operations.\nThese endpoints require API key authentication.\n"
    },
    {
      "name": "Dev - Customers",
      "description": "Developer endpoints for customer management operations.\nThese endpoints require API key authentication.\n"
    }
  ],
  "paths": {
    "/api/v1/client/teams/{teamId}/verification/verify": {
      "post": {
        "summary": "Verify License",
        "operationId": "verifyLicense",
        "description": "This endpoint is used to validate a license key with the Lukittu backend. \nTypically, you should call this endpoint when your software starts and act based on the response provided.\n\n**Important Note**: If you are using a programming language that supports loading business logic code remotely \n(e.g., Java with a Remote ClassLoader), you should not use this endpoint. Instead, use the \"classloader\" endpoint for enhanced security.\n",
        "tags": [
          "Client - Verify"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyLicenseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful license verification response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": []
      }
    },
    "/api/v1/client/teams/{teamId}/verification/heartbeat": {
      "post": {
        "summary": "License Heartbeat",
        "operationId": "licenseHeartbeat",
        "description": "The Heartbeat endpoint is used to determine whether a specific device is still active. \nYou should call this endpoint at regular intervals (e.g., once every 30 minutes). \nThis process also validates the license key in a similar way to the Verify License endpoint.\n",
        "tags": [
          "Client - Verify"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HeartbeatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful heartbeat response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResponse"
                },
                "example": {
                  "data": {
                    "license": {
                      "ipLimit": 5,
                      "hwidLimit": 3,
                      "expirationType": "NEVER"
                    }
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Heartbeat successful",
                    "code": "VALID"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": []
      }
    },
    "/api/v1/client/teams/{teamId}/verification/classloader": {
      "get": {
        "summary": "Download Release",
        "operationId": "downloadRelease",
        "description": "The Classloader endpoint is used to download a release file. It is primarily intended for programming languages \nthat support loading business logic code directly from a remote server into memory. For example, this is commonly used with Java classloaders.\n\nThe downloaded file is encrypted using the session key provided in the request. The client must decrypt the file using the same session key.\n",
        "tags": [
          "Client - Verify"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseKeyQuery"
          },
          {
            "$ref": "#/components/parameters/ProductIdRequired"
          },
          {
            "$ref": "#/components/parameters/SessionKey"
          },
          {
            "$ref": "#/components/parameters/HardwareIdentifier"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "$ref": "#/components/parameters/CustomerId"
          },
          {
            "$ref": "#/components/parameters/Branch"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with encrypted file download",
            "headers": {
              "Content-Type": {
                "description": "The MIME type of the file",
                "schema": {
                  "type": "string"
                },
                "example": "application/octet-stream"
              },
              "X-File-Size": {
                "description": "Size of the file in bytes",
                "schema": {
                  "type": "string"
                },
                "example": "1048576"
              },
              "X-Product-Name": {
                "description": "Name of the product",
                "schema": {
                  "type": "string"
                },
                "example": "My Software"
              },
              "X-Release-Status": {
                "description": "Status of the release",
                "schema": {
                  "$ref": "#/components/schemas/ReleaseStatus"
                },
                "example": "PUBLISHED"
              },
              "X-Release-Created-At": {
                "description": "Creation date of the release",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "2023-09-15T14:30:00Z"
              },
              "X-File-Created-At": {
                "description": "Creation date of the file",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "example": "2023-09-15T14:25:00Z"
              },
              "X-Version": {
                "description": "Version of the release being downloaded",
                "schema": {
                  "type": "string"
                },
                "example": "1.2.3"
              },
              "X-Latest-Version": {
                "description": "Latest version available (may differ from downloaded version)",
                "schema": {
                  "type": "string"
                },
                "example": "1.2.4"
              },
              "X-Lukittu-Version": {
                "description": "Version of the Lukittu platform",
                "schema": {
                  "type": "string"
                },
                "example": "2.1.0"
              },
              "X-Main-Class": {
                "description": "Main class name for Java JAR files",
                "schema": {
                  "type": "string"
                },
                "example": "com.example.Main"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Encrypted file content"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": []
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses": {
      "get": {
        "summary": "List Licenses",
        "operationId": "listLicenses",
        "description": "Retrieve a paginated list of licenses for the specified team.\nResults can be filtered by product and customer associations.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/SortColumn"
          },
          {
            "$ref": "#/components/parameters/SortDirection"
          },
          {
            "$ref": "#/components/parameters/ProductIdsFilter"
          },
          {
            "$ref": "#/components/parameters/CustomerIdsFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Licenses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseListResponse"
                },
                "example": {
                  "data": {
                    "licenses": [
                      {
                        "id": "456e7890-e89b-12d3-a456-426614174111",
                        "licenseKey": "ABCD1-EFGH2-IJKL3-MNOP4-QRST5",
                        "expirationType": "NEVER",
                        "suspended": false,
                        "ipLimit": null,
                        "hwidLimit": null,
                        "metadata": [],
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "createdByUserId": "789e0123-e89b-12d3-a456-426614174222",
                        "createdAt": "2023-09-15T14:30:00Z",
                        "updatedAt": "2023-09-15T14:30:00Z",
                        "lastActiveAt": null
                      }
                    ],
                    "hasNextPage": false
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Licenses retrieved successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create License",
        "operationId": "createLicense",
        "description": "Create a new license with the specified configuration.\nThe license will be automatically generated with a unique key.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLicenseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "License created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}": {
      "get": {
        "summary": "Get License by ID",
        "operationId": "getLicenseById",
        "description": "Retrieve a specific license by its unique identifier.",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          }
        ],
        "responses": {
          "200": {
            "description": "License found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete License by ID",
        "operationId": "deleteLicenseById",
        "description": "Delete a license by its unique identifier. \n**This operation is permanent and cannot be undone.**\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          }
        ],
        "responses": {
          "200": {
            "description": "License successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseDeletionResponse"
                },
                "example": {
                  "data": {
                    "licenseId": "456e7890-e89b-12d3-a456-426614174111",
                    "deleted": true
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "License deleted successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update License",
        "operationId": "updateLicense",
        "description": "Update an existing license's properties including expiration, limits, metadata, \nassociated products, and customers. Can also update the license key itself.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "licenseKey",
                  "expirationType",
                  "suspended",
                  "productIds",
                  "customerIds",
                  "metadata"
                ],
                "properties": {
                  "licenseKey": {
                    "$ref": "#/components/schemas/LicenseKey"
                  },
                  "expirationType": {
                    "type": "string",
                    "enum": [
                      "DATE",
                      "DURATION",
                      "NEVER"
                    ],
                    "description": "How the license expires"
                  },
                  "expirationStart": {
                    "type": "string",
                    "enum": [
                      "CREATION",
                      "ACTIVATION"
                    ],
                    "nullable": true,
                    "description": "When duration-based expiration starts"
                  },
                  "expirationDate": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Exact expiration date (for DATE expiration)"
                  },
                  "expirationDays": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Number of days until expiration (for DURATION expiration)"
                  },
                  "suspended": {
                    "type": "boolean",
                    "description": "Whether the license is suspended"
                  },
                  "productIds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UUID"
                    },
                    "description": "Array of product IDs to associate with this license"
                  },
                  "customerIds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UUID"
                    },
                    "description": "Array of customer IDs to associate with this license"
                  },
                  "hwidLimit": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Maximum number of hardware identifiers"
                  },
                  "ipLimit": {
                    "type": "integer",
                    "minimum": 1,
                    "nullable": true,
                    "description": "Maximum number of IP addresses"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "License updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/{licenseKey}": {
      "get": {
        "summary": "Get License by Key",
        "operationId": "getLicenseByKey",
        "description": "Retrieve a specific license by its license key.",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseKeyPath"
          }
        ],
        "responses": {
          "200": {
            "description": "License found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete License by Key",
        "operationId": "deleteLicenseByKey",
        "description": "Delete a license by its license key. \n**This operation is permanent and cannot be undone.**\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseKeyPath"
          }
        ],
        "responses": {
          "200": {
            "description": "License successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseDeletionResponse"
                },
                "example": {
                  "data": {
                    "licenseKey": "ABCD1-EFGH2-IJKL3-MNOP4-QRST5",
                    "deleted": true
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "License deleted successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}/hwid": {
      "get": {
        "summary": "List License Hardware Identifiers",
        "operationId": "listLicenseHwids",
        "description": "Retrieve a paginated list of hardware identifiers (HWIDs) associated with a specific license.\nIncludes status calculation based on team timeout settings and filtering options.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Column to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "lastSeenAt",
                "createdAt"
              ],
              "default": "lastSeenAt"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "showForgotten",
            "in": "query",
            "description": "Whether to include forgotten hardware identifiers",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hardware identifiers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareIdentifiersListResponse"
                },
                "example": {
                  "data": {
                    "hwids": [
                      {
                        "id": "789e0123-e89b-12d3-a456-426614174333",
                        "identifier": "HWID-ABC123-XYZ789",
                        "status": "active",
                        "forgotten": false,
                        "licenseId": "456e7890-e89b-12d3-a456-426614174111",
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "lastSeenAt": "2023-09-15T14:25:00Z",
                        "createdAt": "2023-09-15T10:00:00Z",
                        "updatedAt": "2023-09-15T14:25:00Z"
                      },
                      {
                        "id": "890e1234-e89b-12d3-a456-426614174444",
                        "identifier": "HWID-DEF456-UVW012",
                        "status": "inactive",
                        "forgotten": false,
                        "licenseId": "456e7890-e89b-12d3-a456-426614174111",
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "lastSeenAt": "2023-09-14T08:00:00Z",
                        "createdAt": "2023-09-14T08:00:00Z",
                        "updatedAt": "2023-09-14T08:00:00Z"
                      }
                    ],
                    "totalResults": 2,
                    "hasNextPage": false
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Hardware identifiers retrieved successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}/hwid/{hwidId}": {
      "patch": {
        "summary": "Update Hardware Identifier Status",
        "operationId": "updateHwidStatus",
        "description": "Update the forgotten status of a hardware identifier. This allows you to \n\"forget\" (soft delete) or \"remember\" (restore) hardware identifiers.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          },
          {
            "name": "hwidId",
            "in": "path",
            "required": true,
            "description": "Hardware identifier ID",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "forgotten"
                ],
                "properties": {
                  "forgotten": {
                    "type": "boolean",
                    "description": "Whether to mark this hardware identifier as forgotten"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hardware identifier updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HardwareIdentifierUpdateResponse"
                },
                "example": {
                  "data": {
                    "hwidId": "789e0123-e89b-12d3-a456-426614174333",
                    "forgotten": true
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Hardware identifier forgotten successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}/ip-address": {
      "get": {
        "summary": "List License IP Addresses",
        "operationId": "listLicenseIpAddresses",
        "description": "Retrieve a paginated list of IP addresses associated with a specific license.\nIncludes status calculation based on team timeout settings, country information, and filtering options.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Column to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "lastSeenAt",
                "createdAt"
              ],
              "default": "lastSeenAt"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "showForgotten",
            "in": "query",
            "description": "Whether to include forgotten IP addresses",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP addresses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpAddressesListResponse"
                },
                "example": {
                  "data": {
                    "ipAddresses": [
                      {
                        "id": "789e0123-e89b-12d3-a456-426614174333",
                        "address": "192.168.1.100",
                        "status": "active",
                        "forgotten": false,
                        "country": "United States",
                        "alpha2": "US",
                        "alpha3": "USA",
                        "licenseId": "456e7890-e89b-12d3-a456-426614174111",
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "lastSeenAt": "2023-09-15T14:25:00Z",
                        "createdAt": "2023-09-15T10:00:00Z",
                        "updatedAt": "2023-09-15T14:25:00Z"
                      },
                      {
                        "id": "890e1234-e89b-12d3-a456-426614174444",
                        "address": "10.0.0.50",
                        "status": "inactive",
                        "forgotten": false,
                        "country": "Canada",
                        "alpha2": "CA",
                        "alpha3": "CAN",
                        "licenseId": "456e7890-e89b-12d3-a456-426614174111",
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "lastSeenAt": "2023-09-14T08:00:00Z",
                        "createdAt": "2023-09-14T08:00:00Z",
                        "updatedAt": "2023-09-14T08:00:00Z"
                      }
                    ],
                    "totalResults": 2,
                    "hasNextPage": false
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "IP addresses retrieved successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/licenses/id/{licenseId}/ip-address/{ipId}": {
      "patch": {
        "summary": "Update IP Address Status",
        "operationId": "updateIpAddressStatus",
        "description": "Update the forgotten status of an IP address. This allows you to \n\"forget\" (soft delete) or \"remember\" (restore) IP addresses.\n",
        "tags": [
          "Dev - Licenses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/LicenseId"
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "description": "IP address ID",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "forgotten"
                ],
                "properties": {
                  "forgotten": {
                    "type": "boolean",
                    "description": "Whether to mark this IP address as forgotten"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IP address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpAddressUpdateResponse"
                },
                "example": {
                  "data": {
                    "ipId": "789e0123-e89b-12d3-a456-426614174333",
                    "forgotten": true
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "IP address forgotten successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/customers": {
      "get": {
        "summary": "List Customers",
        "operationId": "listCustomers",
        "description": "Retrieve a paginated list of customers for the specified team.\nSupports search, pagination, and sorting capabilities.\n",
        "tags": [
          "Dev - Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "description": "Column to sort by",
            "schema": {
              "type": "string",
              "enum": [
                "fullName",
                "createdAt",
                "updatedAt",
                "email",
                "username"
              ],
              "default": "createdAt"
            },
            "example": "createdAt"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "description": "Sort direction",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "example": "desc"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "description": "Search customers by email, full name, or username",
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "example": "john@example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Customers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "hasNextPage": {
                          "type": "boolean",
                          "description": "Whether there are more customers available",
                          "example": true
                        },
                        "customers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CustomerData"
                          }
                        }
                      }
                    },
                    "result": {
                      "$ref": "#/components/schemas/StandardResult"
                    }
                  }
                },
                "example": {
                  "data": {
                    "hasNextPage": false,
                    "customers": [
                      {
                        "id": "789e0123-e89b-12d3-a456-426614174222",
                        "email": "john@example.com",
                        "fullName": "John Doe",
                        "username": "johndoe",
                        "metadata": [
                          {
                            "key": "tier",
                            "value": "premium",
                            "locked": false
                          }
                        ],
                        "address": {
                          "street": "123 Main St",
                          "city": "Anytown",
                          "state": "CA",
                          "country": "US",
                          "postalCode": "12345"
                        },
                        "discordAccount": {
                          "id": "111e2222-e89b-12d3-a456-426614174999",
                          "customerId": "789e0123-e89b-12d3-a456-426614174222",
                          "discordId": "123456789012345678",
                          "username": "johndoe_discord",
                          "avatar": "a1b2c3d4e5f6g7h8i9j0",
                          "createdAt": "2023-09-15T14:30:00Z",
                          "updatedAt": "2023-09-15T14:30:00Z"
                        },
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "createdByUserId": "456e7890-e89b-12d3-a456-426614174111",
                        "createdAt": "2023-09-15T14:30:00Z",
                        "updatedAt": "2023-09-15T14:30:00Z"
                      },
                      {
                        "id": "890f1234-e89b-12d3-a456-426614174333",
                        "email": "jane@example.com",
                        "fullName": "Jane Smith",
                        "username": "janesmith",
                        "metadata": [],
                        "address": {
                          "street": "456 Oak Ave",
                          "city": "Elsewhere",
                          "state": "NY",
                          "country": "US",
                          "postalCode": "54321"
                        },
                        "discordAccount": null,
                        "teamId": "123e4567-e89b-12d3-a456-426614174000",
                        "createdByUserId": "456e7890-e89b-12d3-a456-426614174111",
                        "createdAt": "2023-09-14T10:15:00Z",
                        "updatedAt": "2023-09-14T10:15:00Z"
                      }
                    ]
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Customers found"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create Customer",
        "operationId": "createCustomer",
        "description": "Create a new customer record for the specified team.\nCustomers can be associated with licenses for tracking and management.\n",
        "tags": [
          "Dev - Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "data": {
                    "id": "789e0123-e89b-12d3-a456-426614174222",
                    "email": "customer@example.com",
                    "fullName": "John Doe",
                    "username": "johndoe",
                    "metadata": [
                      {
                        "key": "tier",
                        "value": "standard",
                        "locked": false
                      }
                    ],
                    "address": {
                      "street": "123 Main St",
                      "city": "Anytown",
                      "state": "CA",
                      "country": "US",
                      "postalCode": "12345"
                    },
                    "discordAccount": null,
                    "teamId": "123e4567-e89b-12d3-a456-426614174000",
                    "createdByUserId": "456e7890-e89b-12d3-a456-426614174111",
                    "createdAt": "2023-09-15T14:30:00Z",
                    "updatedAt": "2023-09-15T14:30:00Z"
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Customer created"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/dev/teams/{teamId}/customers/{customerId}": {
      "get": {
        "summary": "Get Customer by ID",
        "operationId": "getCustomerById",
        "description": "Retrieve detailed information about a specific customer by their unique identifier.\n",
        "tags": [
          "Dev - Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/CustomerIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "data": {
                    "id": "789e0123-e89b-12d3-a456-426614174222",
                    "email": "customer@example.com",
                    "fullName": "John Doe",
                    "username": "johndoe",
                    "metadata": [
                      {
                        "key": "tier",
                        "value": "premium",
                        "locked": false
                      }
                    ],
                    "address": {
                      "street": "123 Main St",
                      "city": "Anytown",
                      "state": "CA",
                      "country": "US",
                      "postalCode": "12345"
                    },
                    "discordAccount": {
                      "id": "111e2222-e89b-12d3-a456-426614174999",
                      "customerId": "789e0123-e89b-12d3-a456-426614174222",
                      "discordId": "123456789012345678",
                      "username": "johndoe_discord",
                      "avatar": "a1b2c3d4e5f6g7h8i9j0",
                      "createdAt": "2023-09-15T14:30:00Z",
                      "updatedAt": "2023-09-15T14:30:00Z"
                    },
                    "teamId": "123e4567-e89b-12d3-a456-426614174000",
                    "createdByUserId": "456e7890-e89b-12d3-a456-426614174111",
                    "createdAt": "2023-09-15T14:30:00Z",
                    "updatedAt": "2023-09-15T14:30:00Z"
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Customer found"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "summary": "Update Customer",
        "operationId": "updateCustomer",
        "description": "Update an existing customer's information including email, name, metadata, and address.\n",
        "tags": [
          "Dev - Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/CustomerIdPath"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                },
                "example": {
                  "data": {
                    "id": "789e0123-e89b-12d3-a456-426614174222",
                    "email": "newemail@example.com",
                    "fullName": "John Updated Doe",
                    "username": "johnupdated",
                    "metadata": [
                      {
                        "key": "tier",
                        "value": "premium",
                        "locked": false
                      }
                    ],
                    "address": {
                      "street": "456 Updated St",
                      "city": "New City",
                      "state": "NY",
                      "country": "US",
                      "postalCode": "54321"
                    },
                    "discordAccount": null,
                    "teamId": "123e4567-e89b-12d3-a456-426614174000",
                    "createdByUserId": "456e7890-e89b-12d3-a456-426614174111",
                    "createdAt": "2023-09-15T14:30:00Z",
                    "updatedAt": "2023-09-15T14:35:00Z"
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:35:00Z",
                    "valid": true,
                    "details": "Customer updated"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Customer by ID",
        "operationId": "deleteCustomer",
        "description": "Permanently delete a customer and all associated data including metadata and address information.\n**Warning**: This action cannot be undone.\n",
        "tags": [
          "Dev - Customers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TeamId"
          },
          {
            "$ref": "#/components/parameters/CustomerIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "customerId": {
                          "$ref": "#/components/schemas/UUID"
                        },
                        "deleted": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    "result": {
                      "$ref": "#/components/schemas/StandardResult"
                    }
                  }
                },
                "example": {
                  "data": {
                    "customerId": "789e0123-e89b-12d3-a456-426614174222",
                    "deleted": true
                  },
                  "result": {
                    "timestamp": "2023-09-15T14:30:00Z",
                    "valid": true,
                    "details": "Customer deleted successfully"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/StandardError"
          },
          "5XX": {
            "$ref": "#/components/responses/StandardError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "StandardResult": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the response was generated"
          },
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the operation was successful"
          },
          "details": {
            "type": "string",
            "description": "Human-readable description of the result"
          }
        },
        "required": [
          "timestamp",
          "valid",
          "details"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Additional error-related data",
            "nullable": true
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StandardResult"
              },
              {
                "type": "object",
                "properties": {
                  "valid": {
                    "type": "boolean",
                    "enum": [
                      false
                    ],
                    "description": "Always false for error responses"
                  },
                  "code": {
                    "type": "string",
                    "description": "Error code indicating the specific issue",
                    "enum": [
                      "INTERNAL_SERVER_ERROR",
                      "BAD_REQUEST",
                      "LICENSE_NOT_FOUND",
                      "IP_LIMIT_REACHED",
                      "HWID_LIMIT_REACHED",
                      "PRODUCT_NOT_FOUND",
                      "CUSTOMER_NOT_FOUND",
                      "LICENSE_EXPIRED",
                      "LICENSE_SUSPENDED",
                      "TEAM_NOT_FOUND",
                      "RATE_LIMIT",
                      "HARDWARE_IDENTIFIER_BLACKLISTED",
                      "COUNTRY_BLACKLISTED",
                      "IP_BLACKLISTED",
                      "RELEASE_NOT_FOUND",
                      "FORBIDDEN",
                      "UNAUTHORIZED",
                      "INVALID_SESSION_KEY",
                      "NO_ACCESS_TO_RELEASE",
                      "RELEASE_ARCHIVED",
                      "RELEASE_DRAFT"
                    ]
                  }
                },
                "required": [
                  "code"
                ]
              }
            ]
          }
        },
        "required": [
          "result"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Response data"
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StandardResult"
              },
              {
                "type": "object",
                "properties": {
                  "valid": {
                    "type": "boolean",
                    "enum": [
                      true
                    ],
                    "description": "Always true for success responses"
                  }
                }
              }
            ]
          }
        },
        "required": [
          "data",
          "result"
        ]
      },
      "Metadata": {
        "type": "array",
        "description": "Key-value metadata pairs",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Metadata key"
            },
            "value": {
              "type": "string",
              "description": "Metadata value"
            },
            "locked": {
              "type": "boolean",
              "description": "Whether this metadata field is locked from client modification"
            }
          },
          "required": [
            "key",
            "value",
            "locked"
          ]
        }
      },
      "UUID": {
        "type": "string",
        "format": "uuid",
        "description": "UUID v4 identifier"
      },
      "LicenseKey": {
        "type": "string",
        "pattern": "^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$",
        "description": "Lukittu license key format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX where X is an uppercase letter (A-Z) or digit (0-9)"
      },
      "LicenseData": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "Unique license identifier"
          },
          "licenseKey": {
            "$ref": "#/components/schemas/LicenseKey"
          },
          "ipLimit": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "description": "Maximum number of different IP addresses that can use this license"
          },
          "hwidLimit": {
            "type": "integer",
            "nullable": true,
            "minimum": 1,
            "description": "Maximum number of different hardware IDs that can use this license"
          },
          "expirationType": {
            "$ref": "#/components/schemas/ExpirationType"
          },
          "expirationStart": {
            "$ref": "#/components/schemas/ExpirationStart"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Specific expiration date (when expirationType is DATE)"
          },
          "expirationDays": {
            "type": "integer",
            "nullable": true,
            "minimum": 1,
            "description": "Number of days until expiration (when expirationType is DURATION)"
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the license is suspended"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "teamId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Team that owns this license"
          },
          "createdByUserId": {
            "$ref": "#/components/schemas/UUID",
            "description": "User who created this license"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "License creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "License last update timestamp"
          },
          "lastActiveAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last activity timestamp for this license"
          }
        },
        "required": [
          "id",
          "licenseKey",
          "expirationType",
          "suspended",
          "teamId",
          "createdByUserId",
          "createdAt",
          "updatedAt"
        ]
      },
      "LicenseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LicenseData"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "customers": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomerData"
                        },
                        "description": "Customers associated with this license"
                      },
                      "products": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ProductData"
                        },
                        "description": "Products associated with this license"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "CreateLicenseRequest": {
        "type": "object",
        "properties": {
          "customerIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "description": "Customer UUIDs to associate with this license"
          },
          "productIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "description": "Product UUIDs to associate with this license"
          },
          "expirationType": {
            "$ref": "#/components/schemas/ExpirationType"
          },
          "expirationStart": {
            "$ref": "#/components/schemas/ExpirationStart",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Required when expirationType is DATE"
          },
          "expirationDays": {
            "type": "integer",
            "minimum": 1,
            "nullable": true,
            "description": "Required when expirationType is DURATION"
          },
          "ipLimit": {
            "type": "integer",
            "minimum": 0,
            "nullable": true
          },
          "hwidLimit": {
            "type": "integer",
            "minimum": 1,
            "nullable": true
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether to create the license in suspended state"
          },
          "sendEmailDelivery": {
            "type": "boolean",
            "description": "Whether to send license details via email"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "expirationType",
          "suspended",
          "sendEmailDelivery",
          "productIds",
          "customerIds",
          "metadata"
        ]
      },
      "VerifyLicenseRequest": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "$ref": "#/components/schemas/LicenseKey"
          },
          "customerId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Customer UUID (required if strict customers enabled)"
          },
          "productId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Product UUID (required if strict products enabled)"
          },
          "challenge": {
            "$ref": "#/components/schemas/Challenge"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "hardwareIdentifier": {
            "$ref": "#/components/schemas/HardwareIdentifier"
          },
          "branch": {
            "$ref": "#/components/schemas/BranchName"
          }
        },
        "required": [
          "licenseKey"
        ]
      },
      "HeartbeatRequest": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "$ref": "#/components/schemas/LicenseKey"
          },
          "customerId": {
            "$ref": "#/components/schemas/UUID"
          },
          "productId": {
            "$ref": "#/components/schemas/UUID"
          },
          "challenge": {
            "$ref": "#/components/schemas/Challenge"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "hardwareIdentifier": {
            "$ref": "#/components/schemas/HardwareIdentifier"
          },
          "branch": {
            "$ref": "#/components/schemas/BranchName"
          }
        },
        "required": [
          "licenseKey",
          "hardwareIdentifier"
        ]
      },
      "VerificationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/VerificationResponseData"
              },
              "result": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StandardResult"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "VALID"
                        ]
                      },
                      "challengeResponse": {
                        "type": "string",
                        "description": "Signed challenge response (present if challenge was provided)"
                      }
                    },
                    "required": [
                      "code"
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "LicenseDeletionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "licenseId": {
                    "$ref": "#/components/schemas/UUID",
                    "description": "ID of the deleted license"
                  },
                  "licenseKey": {
                    "$ref": "#/components/schemas/LicenseKey",
                    "description": "Key of the deleted license"
                  },
                  "deleted": {
                    "type": "boolean",
                    "enum": [
                      true
                    ],
                    "description": "Confirmation that license was deleted"
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "licenseId",
                      "deleted"
                    ]
                  },
                  {
                    "required": [
                      "licenseKey",
                      "deleted"
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "LicenseListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "licenses": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LicenseData"
                    }
                  },
                  "hasNextPage": {
                    "type": "boolean",
                    "description": "Whether more pages are available"
                  }
                },
                "required": [
                  "licenses",
                  "hasNextPage"
                ]
              }
            }
          }
        ]
      },
      "CustomerData": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "Unique customer identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "Customer email address"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "description": "Customer full name"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "Customer username"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "nullable": true,
            "description": "Customer address information"
          },
          "discordAccount": {
            "$ref": "#/components/schemas/DiscordAccount",
            "nullable": true,
            "description": "Associated Discord account information"
          },
          "teamId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Team that owns this customer"
          },
          "createdByUserId": {
            "$ref": "#/components/schemas/UUID",
            "description": "User who created this customer record"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Customer record creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Customer record last update timestamp"
          }
        },
        "required": [
          "id",
          "teamId",
          "createdByUserId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CustomerResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CustomerData"
              }
            }
          }
        ]
      },
      "CustomerRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "discordId": {
            "type": "string",
            "pattern": "^\\d{17,24}$",
            "nullable": true,
            "description": "Discord user ID (snowflake). When provided, Discord user will be validated and associated with this customer."
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "address": {
            "$ref": "#/components/schemas/Address",
            "nullable": true
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "nullable": true,
            "description": "Street address"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "City"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "description": "State or province"
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "Country"
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal or ZIP code"
          }
        }
      },
      "ProductData": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "Unique product identifier"
          },
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "description": "Product URL or homepage"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "teamId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Team that owns this product"
          },
          "createdByUserId": {
            "$ref": "#/components/schemas/UUID",
            "description": "User who created this product"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Product creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Product last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "teamId",
          "createdByUserId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ProductResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ProductData"
              }
            }
          }
        ]
      },
      "Challenge": {
        "type": "string",
        "maxLength": 1000,
        "pattern": "^[^\\s]+$",
        "description": "Client-generated random string for request signing (no spaces allowed)"
      },
      "Version": {
        "type": "string",
        "minLength": 3,
        "maxLength": 255,
        "pattern": "^[^\\s]+$",
        "description": "Software version identifier (no spaces allowed)"
      },
      "HardwareIdentifier": {
        "type": "string",
        "minLength": 10,
        "maxLength": 1000,
        "pattern": "^[^\\s]+$",
        "description": "Unique hardware identifier for client device (no spaces allowed)"
      },
      "BranchName": {
        "type": "string",
        "minLength": 2,
        "maxLength": 255,
        "pattern": "^[a-zA-Z0-9_-]+$",
        "description": "Product branch name"
      },
      "ExpirationType": {
        "type": "string",
        "enum": [
          "NEVER",
          "DATE",
          "DURATION"
        ],
        "description": "Defines how license expiration is calculated"
      },
      "ExpirationStart": {
        "type": "string",
        "enum": [
          "CREATION",
          "ACTIVATION"
        ],
        "description": "Defines when the license expiration countdown begins"
      },
      "CustomerVerificationData": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Customer email address"
          },
          "fullName": {
            "type": "string",
            "description": "Customer full name"
          },
          "username": {
            "type": "string",
            "description": "Customer username"
          },
          "metadata": {
            "type": "array",
            "description": "Customer metadata (filtered by ReturnedFields configuration)",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          }
        }
      },
      "ProductVerificationData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "url": {
            "type": "string",
            "description": "Product URL"
          },
          "latestRelease": {
            "type": "object",
            "description": "Information about the latest release for this product",
            "properties": {
              "version": {
                "type": "string",
                "description": "Latest release version"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "When the release was created"
              }
            },
            "required": [
              "version",
              "createdAt"
            ]
          },
          "metadata": {
            "type": "array",
            "description": "Product metadata (filtered by ReturnedFields configuration)",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          }
        }
      },
      "VerificationResponseData": {
        "type": "object",
        "properties": {
          "license": {
            "type": "object",
            "description": "License details (included based on ReturnedFields configuration)",
            "properties": {
              "ipLimit": {
                "type": "integer",
                "nullable": true,
                "description": "Maximum IP addresses allowed"
              },
              "hwidLimit": {
                "type": "integer",
                "nullable": true,
                "description": "Maximum hardware IDs allowed"
              },
              "expirationType": {
                "$ref": "#/components/schemas/ExpirationType"
              },
              "expirationStart": {
                "$ref": "#/components/schemas/ExpirationStart"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "expirationDays": {
                "type": "integer",
                "nullable": true
              },
              "metadata": {
                "type": "array",
                "description": "License metadata (filtered by ReturnedFields)",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              }
            }
          },
          "customers": {
            "type": "array",
            "description": "Customer details (included based on ReturnedFields configuration)",
            "items": {
              "$ref": "#/components/schemas/CustomerVerificationData"
            }
          },
          "products": {
            "type": "array",
            "description": "Product details (included based on ReturnedFields configuration)",
            "items": {
              "$ref": "#/components/schemas/ProductVerificationData"
            }
          }
        },
        "nullable": true
      },
      "SessionKey": {
        "type": "string",
        "minLength": 10,
        "maxLength": 1000,
        "pattern": "^[^\\s]+$",
        "description": "Unique session identifier for encrypted file download (no spaces allowed)"
      },
      "ReleaseStatus": {
        "type": "string",
        "enum": [
          "PUBLISHED",
          "DRAFT",
          "ARCHIVED",
          "DEPRECATED"
        ],
        "description": "Status of a product release"
      },
      "DiscordAccount": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "Discord account record ID"
          },
          "customerId": {
            "$ref": "#/components/schemas/UUID",
            "description": "Associated customer ID"
          },
          "discordId": {
            "type": "string",
            "pattern": "^\\d{17,24}$",
            "description": "Discord user ID (snowflake)"
          },
          "username": {
            "type": "string",
            "description": "Discord username"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "description": "Discord avatar hash (null if no custom avatar)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Discord account record creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Discord account record last update timestamp"
          }
        },
        "required": [
          "id",
          "customerId",
          "discordId",
          "username",
          "createdAt",
          "updatedAt"
        ]
      },
      "HwidStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "forgotten"
        ],
        "description": "Current status of the hardware identifier"
      },
      "HardwareIdentifierData": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "Hardware identifier ID"
          },
          "identifier": {
            "type": "string",
            "description": "The hardware identifier string"
          },
          "status": {
            "$ref": "#/components/schemas/HwidStatus"
          },
          "forgotten": {
            "type": "boolean",
            "description": "Whether this HWID has been marked as forgotten"
          },
          "licenseId": {
            "$ref": "#/components/schemas/UUID"
          },
          "teamId": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this HWID was last seen"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this HWID was first created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this HWID was last updated"
          }
        },
        "required": [
          "id",
          "identifier",
          "status",
          "forgotten",
          "licenseId",
          "teamId",
          "lastSeenAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "HardwareIdentifiersListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "hwids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/HardwareIdentifierData"
                    }
                  },
                  "totalResults": {
                    "type": "integer",
                    "description": "Total number of hardware identifiers"
                  },
                  "hasNextPage": {
                    "type": "boolean",
                    "description": "Whether there are more results available"
                  }
                },
                "required": [
                  "hwids",
                  "totalResults",
                  "hasNextPage"
                ]
              }
            }
          }
        ]
      },
      "HardwareIdentifierUpdateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "hwidId": {
                    "$ref": "#/components/schemas/UUID"
                  },
                  "forgotten": {
                    "type": "boolean",
                    "description": "Current forgotten status"
                  }
                },
                "required": [
                  "hwidId",
                  "forgotten"
                ]
              }
            }
          }
        ]
      },
      "IpStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "forgotten"
        ],
        "description": "Current status of the IP address"
      },
      "IpAddressData": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "IP address ID"
          },
          "address": {
            "type": "string",
            "description": "The IP address",
            "example": "192.168.1.100"
          },
          "status": {
            "$ref": "#/components/schemas/IpStatus"
          },
          "forgotten": {
            "type": "boolean",
            "description": "Whether this IP address has been marked as forgotten"
          },
          "country": {
            "type": "string",
            "nullable": true,
            "description": "Country name where the IP is located",
            "example": "United States"
          },
          "alpha2": {
            "type": "string",
            "nullable": true,
            "description": "ISO 3166-1 alpha-2 country code",
            "example": "US"
          },
          "alpha3": {
            "type": "string",
            "nullable": true,
            "description": "ISO 3166-1 alpha-3 country code",
            "example": "USA"
          },
          "licenseId": {
            "$ref": "#/components/schemas/UUID"
          },
          "teamId": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this IP address was last seen"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this IP address was first created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When this IP address was last updated"
          }
        },
        "required": [
          "id",
          "address",
          "status",
          "forgotten",
          "licenseId",
          "teamId",
          "lastSeenAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "IpAddressesListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "ipAddresses": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/IpAddressData"
                    }
                  },
                  "totalResults": {
                    "type": "integer",
                    "description": "Total number of IP addresses"
                  },
                  "hasNextPage": {
                    "type": "boolean",
                    "description": "Whether there are more results available"
                  }
                },
                "required": [
                  "ipAddresses",
                  "totalResults",
                  "hasNextPage"
                ]
              }
            }
          }
        ]
      },
      "IpAddressUpdateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "ipId": {
                    "$ref": "#/components/schemas/UUID"
                  },
                  "forgotten": {
                    "type": "boolean",
                    "description": "Current forgotten status"
                  }
                },
                "required": [
                  "ipId",
                  "forgotten"
                ]
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "TeamId": {
        "name": "teamId",
        "in": "path",
        "required": true,
        "description": "Your team's UUID. You can find this value in your team's settings on the Lukittu dashboard.",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "example": "123e4567-e89b-12d3-a456-426614174000"
      },
      "LicenseId": {
        "name": "licenseId",
        "in": "path",
        "required": true,
        "description": "The unique identifier (UUID v4) of the license.",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "example": "456e7890-e89b-12d3-a456-426614174111"
      },
      "LicenseKeyPath": {
        "name": "licenseKey",
        "in": "path",
        "required": true,
        "description": "The Lukittu license key to operate on.",
        "schema": {
          "$ref": "#/components/schemas/LicenseKey"
        },
        "example": "ABCD1-EFGH2-IJKL3-MNOP4-QRST5"
      },
      "CustomerIdPath": {
        "name": "customerId",
        "in": "path",
        "required": true,
        "description": "The unique identifier (UUID v4) of the customer.",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "example": "789e0123-e89b-12d3-a456-426614174222"
      },
      "Page": {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Page number for pagination (1-based)",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "example": 1
      },
      "PageSize": {
        "name": "pageSize",
        "in": "query",
        "required": false,
        "description": "Number of items per page",
        "schema": {
          "type": "integer",
          "enum": [
            10,
            25,
            50,
            100
          ],
          "default": 25
        },
        "example": 25
      },
      "LicenseKeyQuery": {
        "name": "licenseKey",
        "in": "query",
        "required": true,
        "description": "The Lukittu license key for verification.",
        "schema": {
          "$ref": "#/components/schemas/LicenseKey"
        },
        "example": "ABCD1-EFGH2-IJKL3-MNOP4-QRST5"
      },
      "ProductIdRequired": {
        "name": "productId",
        "in": "query",
        "required": true,
        "description": "The product's UUID (UUID v4). Required to download the correct product release.",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "example": "012e3456-e89b-12d3-a456-426614174333"
      },
      "SessionKey": {
        "name": "sessionKey",
        "in": "query",
        "required": true,
        "description": "A unique session identifier for encrypted file download. Must be encrypted using the team's public key.",
        "schema": {
          "$ref": "#/components/schemas/SessionKey"
        },
        "example": "randomSessionKey123456789"
      },
      "HardwareIdentifier": {
        "name": "hardwareIdentifier",
        "in": "query",
        "required": true,
        "description": "A unique identifier for the client device. Typically a hardware ID that remains consistent across sessions.",
        "schema": {
          "$ref": "#/components/schemas/HardwareIdentifier"
        },
        "example": "ABC123DEF456GHI789JKL012MNO345PQR678"
      },
      "Version": {
        "name": "version",
        "in": "query",
        "required": false,
        "description": "The version number of your software. Useful for tracking which releases are actively being used.",
        "schema": {
          "$ref": "#/components/schemas/Version"
        },
        "example": "1.2.3"
      },
      "CustomerId": {
        "name": "customerId",
        "in": "query",
        "required": false,
        "description": "The customer's UUID (UUID v4). Required if strict customers are enabled and the license has customers attached.",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "example": "789e0123-e89b-12d3-a456-426614174222"
      },
      "Branch": {
        "name": "branch",
        "in": "query",
        "required": false,
        "description": "The branch name of your product. This allows targeting specific release branches.",
        "schema": {
          "$ref": "#/components/schemas/BranchName"
        },
        "example": "main"
      },
      "SortColumn": {
        "name": "sortColumn",
        "in": "query",
        "required": false,
        "description": "Column to sort by",
        "schema": {
          "type": "string",
          "enum": [
            "createdAt",
            "updatedAt"
          ],
          "default": "createdAt"
        },
        "example": "createdAt"
      },
      "SortDirection": {
        "name": "sortDirection",
        "in": "query",
        "required": false,
        "description": "Sort direction",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc"
        },
        "example": "desc"
      },
      "ProductIdsFilter": {
        "name": "productIds",
        "in": "query",
        "required": false,
        "description": "Comma-separated list of product UUIDs to filter by",
        "schema": {
          "type": "string"
        },
        "example": "012e3456-e89b-12d3-a456-426614174333,456e7890-e89b-12d3-a456-426614174444"
      },
      "CustomerIdsFilter": {
        "name": "customerIds",
        "in": "query",
        "required": false,
        "description": "Comma-separated list of customer UUIDs to filter by",
        "schema": {
          "type": "string"
        },
        "example": "789e0123-e89b-12d3-a456-426614174222,123e4567-e89b-12d3-a456-426614174555"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "apiKey",
        "description": "API key authentication for development endpoints.\n\nYou can create API keys in your team's settings on the Lukittu dashboard.\nInclude the API key in the Authorization header as: `Bearer YOUR_API_KEY`\n\nExample:\n```\nAuthorization: Bearer lukittu_api_key_abc123def456...\n```\n"
      }
    },
    "responses": {
      "StandardError": {
        "description": "Standard API error response. All errors follow the same `{data, result}` structure.\nThe HTTP status code indicates the general error category, while `result.code` provides specific error details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
